unit untConexao;

interface

uses
  SysUtils, FireDAC.Comp.Client, FireDAC.Phys.SQLite, FireDAC.Stan.Def, untConfig;

type
  TConexao = class
  private
    FConexao: TFDConnection;
    constructor Create;

  public
    property Conexao: TFDConnection read FConexao;

    class function NewInstance: TObject; override;
    class function ObterInstancia: TConexao;

  end;

var
  Instancia: TConexao;

implementation

{TConexao}

constructor TConexao.Create;
var
  sqLiteDriver: TFDPhysSQLiteDriverLink;
begin
  inherited Create;

  if DRIVER_NAME = 'SQLite' then
  begin
    sqLiteDriver := TFDPhysSQLiteDriverLink.Create(nil);

    try
      sqLiteDriver.DriverID := 'SQLite';

      FConexao := TFDConnection.Create(nil);
      FConexao.Name := 'conexao';
//      FConexao.DriverName := DRIVER_NAME;
      FConexao.Params.DriverID := DRIVER_NAME;
      FConexao.Params.Database := DATABASE;

      FConexao.Connected := true;
    finally
      sqLiteDriver.Free;
    end;
  end;
end;

class function TConexao.NewInstance: TObject;
begin
  if not Assigned(Instancia) then
    Instancia := TConexao(inherited NewInstance);

  result := Instancia;
end;

class function TConexao.ObterInstancia: TConexao;
begin
  result := TConexao.Create;
end;

initialization

finalization
  FreeAndNil(Instancia);

end.
